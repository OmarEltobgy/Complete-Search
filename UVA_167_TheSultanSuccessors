import java.util.*;
public class UVA_167_TheSultanSuccessors 
{
    static int[][] X = new int[8][8];
	static int[][] solution = new int[8][2];
	static int[] verticalCheck = new int[8];
	static int horizontalCheck;
	static int max;
	public static int evaluate()
	{
		int number = 0;
		for(int i=0; i<8; i++)
		{
			//System.out.print(X[solution[i][0]][solution[i][1]] + "  ");
			number += X[solution[i][0]][solution[i][1]];
		}
		//System.out.println(number);
		return number;
					
	}
	
	public static int diagonalCheck()
	{
		for(int i=0; i<8; i++)
		{
			for(int j=i+1; j<8; j++)
				if(Math.abs(solution[i][0]-solution[j][0]) == Math.abs(solution[i][1]-solution[j][1]))
					return 0;
		}
		/*for(int i=0; i<8; i++)
			System.out.println(solution[i][0] + " " + solution[i][1]);
		System.out.println();
		for(int i=0; i<8; i++)
		{
			for(int j=0; j<8; j++)
				if(solution[i][1] == j)
					System.out.print("x ");
				else
					System.out.print(". ");
			System.out.println();
		}*/
		return 1;
	}
	
	public static void solve(int i, int j, int N)
	{
		if(j == 8)
		{
			horizontalCheck = 0;
			solve(i+1, 0, N);
			return;
		}
		if(i == 8)
		{
			if(N==8 && diagonalCheck() == 1)
			{
				int X = evaluate();
				max = Math.max(X, max);
				//System.out.println(X);
			}
			return;
		}
		
		if(horizontalCheck == 1)
		{
			solve(i, j+1, N);
			return;
		}
		
		if(verticalCheck[j] == 1)
		{
			solve(i, j+1, N);
			return;
		}
			
		horizontalCheck = 1;
		verticalCheck[j] = 1;
		solution[N][0] = i;
		solution[N][1] = j;
		solve(i, j+1, N+1);
		
		horizontalCheck = 0;
		verticalCheck[j] = 0;
		solution[N][0] = 0;
		solution[N][1] = 0;
		solve(i, j+1, N);			
	}
	public static void main(String[] args) 
	{
		Scanner in = new Scanner(System.in);
		int k, i, j, c;
		k = in.nextInt();
		for(c=0; c<k; c++)
		{
			for(i=0; i<8; i++)
				for(j=0; j<8; j++)
					X[i][j] = in.nextInt();
			max = 0;
			for(i=0; i<8; i++)
			{
				verticalCheck[i] = 0;
				solution[i][0] = 0;
				solution[i][1] = 0;
			}
			horizontalCheck = 0;
			solve(0, 0, 0);
			System.out.printf("%5d\n",max);
		}
		in.close();
	}
}
